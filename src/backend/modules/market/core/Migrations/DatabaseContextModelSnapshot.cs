// <auto-generated />
using System;
using AM.Services.Market.Domain.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IM.Service.Market.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Country", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "The Russian Federation",
                            Name = "Rus"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Соединенные Штаты Америки",
                            Name = "Usa"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Chinese People's Republic",
                            Name = "Chn"
                        },
                        new
                        {
                            Id = (byte)5,
                            Description = "Deutschland",
                            Name = "Deu"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "Great Britain",
                            Name = "Gbr"
                        });
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Currency", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Rub",
                            Name = "₽"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Usd",
                            Name = "$"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Eur",
                            Name = "€"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "Gbp",
                            Name = "£"
                        },
                        new
                        {
                            Id = (byte)5,
                            Description = "Chy",
                            Name = "¥"
                        },
                        new
                        {
                            Id = (byte)6,
                            Description = "Btc",
                            Name = "₿"
                        },
                        new
                        {
                            Id = (byte)7,
                            Description = "Eth",
                            Name = "Ξ"
                        });
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Industry", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte>("SectorId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SectorId");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = (byte)20,
                            Name = "Разные промышленные товары",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)18,
                            Name = "Химическое производство",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "Золото и серебро",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)29,
                            Name = "Металлодобывающая промышленность",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)27,
                            Name = "Нерудная промышленность",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)12,
                            Name = "Строительство-снабжение",
                            SectorId = (byte)2
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = "Аэрокосмическая и оборонная промышленность",
                            SectorId = (byte)2
                        },
                        new
                        {
                            Id = (byte)22,
                            Name = "Различные средства производства",
                            SectorId = (byte)2
                        },
                        new
                        {
                            Id = (byte)14,
                            Name = "Научно-техническое приборостроение",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = "Компьютерные услуги",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)21,
                            Name = "Программное обеспечение и программирование",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)19,
                            Name = "Коммуникационное оборудование",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Полупроводники",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)16,
                            Name = "Электроэнергетика",
                            SectorId = (byte)4
                        },
                        new
                        {
                            Id = (byte)15,
                            Name = "Газоснабжение",
                            SectorId = (byte)4
                        },
                        new
                        {
                            Id = (byte)30,
                            Name = "Нефтегазовая промышленность",
                            SectorId = (byte)5
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Интегрированная нефтегазовая промышленность",
                            SectorId = (byte)5
                        },
                        new
                        {
                            Id = (byte)23,
                            Name = "Автомобильная промышленность",
                            SectorId = (byte)6
                        },
                        new
                        {
                            Id = (byte)17,
                            Name = "Региональные банки",
                            SectorId = (byte)7
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "Потребительские финансовые услуги",
                            SectorId = (byte)7
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Пищевая промышленность",
                            SectorId = (byte)8
                        },
                        new
                        {
                            Id = (byte)13,
                            Name = "Напитки",
                            SectorId = (byte)8
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "Производство и поставки медицинского оборудования",
                            SectorId = (byte)9
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = "Биотехнологии и лекарства",
                            SectorId = (byte)9
                        },
                        new
                        {
                            Id = (byte)25,
                            Name = "Услуги связи",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)26,
                            Name = "Розничная торговля",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = "Эфирное и кабельное телевидение",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)24,
                            Name = "Деловые услуги",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Отдых",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)28,
                            Name = "Воздушные перевозки",
                            SectorId = (byte)11
                        });
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Sector", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Сырье"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Средства производства"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Технологии"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Коммунальные услуги"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "Энергетика"
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "Цикличные компании"
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "Финансы"
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = "Нецикличные компании"
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = "Здравоохранение"
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = "Услуги"
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = "Транспорт"
                        });
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Status", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "new object",
                            Name = "New"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "ready to compute",
                            Name = "Ready"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "computing in process",
                            Name = "Computing"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "computing was completed",
                            Name = "Computed"
                        },
                        new
                        {
                            Id = (byte)5,
                            Description = "computing was not done",
                            Name = "NotComputed"
                        },
                        new
                        {
                            Id = (byte)6,
                            Description = "error",
                            Name = "Error"
                        });
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Coefficient", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceId")
                        .HasColumnType("smallint");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<byte>("Quarter")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("DebtLoad")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Eps")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Pb")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Pe")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Profitability")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Result")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Roa")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Roe")
                        .HasColumnType("numeric(18,4)");

                    b.Property<byte>("StatusId")
                        .HasColumnType("smallint");

                    b.HasKey("CompanyId", "SourceId", "Year", "Quarter");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Coefficients");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("CountryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<byte>("IndustryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Dividend", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceId")
                        .HasColumnType("smallint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Result")
                        .HasColumnType("numeric(18,4)");

                    b.Property<byte>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CompanyId", "SourceId", "Date");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Float", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceId")
                        .HasColumnType("smallint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueFree")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyId", "SourceId", "Date");

                    b.HasIndex("SourceId");

                    b.ToTable("Floats");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.ManyToMany.CompanySource", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceId")
                        .HasColumnType("smallint");

                    b.Property<string>("Value")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("CompanyId", "SourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("CompanySources");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Price", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceId")
                        .HasColumnType("smallint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Result")
                        .HasColumnType("numeric(18,4)");

                    b.Property<byte>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("ValueTrue")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CompanyId", "SourceId", "Date");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Rating", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal?>("Result")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ResultCoefficient")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ResultDividend")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ResultPrice")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ResultReport")
                        .HasColumnType("numeric(18,4)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("CompanyId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Report", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceId")
                        .HasColumnType("smallint");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<byte>("Quarter")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Asset")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("CashFlow")
                        .HasColumnType("numeric(18,4)");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("LongTermDebt")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("Multiplier")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Obligation")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitGross")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitNet")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Result")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ShareCapital")
                        .HasColumnType("numeric(18,4)");

                    b.Property<byte>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CompanyId", "SourceId", "Year", "Quarter");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Source", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Data from manual enter",
                            Name = "Manual"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Data from Moscow Exchange",
                            Name = "Moex"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Data from Spb Exchange",
                            Name = "Spbex"
                        },
                        new
                        {
                            Id = (byte)6,
                            Description = "Data from YahooFinance.com",
                            Name = "Yahoo"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "Data from Tdameritrade.com",
                            Name = "Tdameritrade"
                        },
                        new
                        {
                            Id = (byte)5,
                            Description = "Data from Investing.com",
                            Name = "Investing"
                        });
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Split", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceId")
                        .HasColumnType("smallint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("CompanyId", "SourceId", "Date");

                    b.HasIndex("SourceId");

                    b.ToTable("Splits");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Industry", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Sector", "Sector")
                        .WithMany("Industries")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Coefficient", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Company", "Company")
                        .WithMany("Coefficients")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Source", "Source")
                        .WithMany("Coefficients")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Status", "Status")
                        .WithMany("Coefficients")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Source");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Company", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Industry", "Industry")
                        .WithMany("Companies")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Dividend", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Company", "Company")
                        .WithMany("Dividends")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Currency", "Currency")
                        .WithMany("Dividends")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Source", "Source")
                        .WithMany("Dividends")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Status", "Status")
                        .WithMany("Dividends")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Source");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Float", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Company", "Company")
                        .WithMany("Floats")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Source", "Source")
                        .WithMany("Floats")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.ManyToMany.CompanySource", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Company", "Company")
                        .WithMany("Sources")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Source", "Source")
                        .WithMany("CompanySources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Price", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Company", "Company")
                        .WithMany("Prices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Currency", "Currency")
                        .WithMany("Prices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Source", "Source")
                        .WithMany("Prices")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Status", "Status")
                        .WithMany("Prices")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Source");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Rating", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Company", "Company")
                        .WithOne("Rating")
                        .HasForeignKey("IM.Service.Market.Domain.Entities.Rating", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Report", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Company", "Company")
                        .WithMany("Reports")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Currency", "Currency")
                        .WithMany("Reports")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Source", "Source")
                        .WithMany("Reports")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Catalogs.Status", "Status")
                        .WithMany("Reports")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Source");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Split", b =>
                {
                    b.HasOne("IM.Service.Market.Domain.Entities.Company", "Company")
                        .WithMany("Splits")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Market.Domain.Entities.Source", "Source")
                        .WithMany("Splits")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Country", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Currency", b =>
                {
                    b.Navigation("Dividends");

                    b.Navigation("Prices");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Industry", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Sector", b =>
                {
                    b.Navigation("Industries");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Catalogs.Status", b =>
                {
                    b.Navigation("Coefficients");

                    b.Navigation("Dividends");

                    b.Navigation("Prices");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Company", b =>
                {
                    b.Navigation("Coefficients");

                    b.Navigation("Dividends");

                    b.Navigation("Floats");

                    b.Navigation("Prices");

                    b.Navigation("Rating");

                    b.Navigation("Reports");

                    b.Navigation("Sources");

                    b.Navigation("Splits");
                });

            modelBuilder.Entity("IM.Service.Market.Domain.Entities.Source", b =>
                {
                    b.Navigation("Coefficients");

                    b.Navigation("CompanySources");

                    b.Navigation("Dividends");

                    b.Navigation("Floats");

                    b.Navigation("Prices");

                    b.Navigation("Reports");

                    b.Navigation("Splits");
                });
#pragma warning restore 612, 618
        }
    }
}
